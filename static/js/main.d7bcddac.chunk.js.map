{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","error","setError","isLoaded","setIsLoaded","items","setItems","useEffect","fetch","then","res","json","result","className","map","item","index","href","url","name","replaceAll","dangerouslySetInnerHTML","__html","answer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMA0DeA,MAhDf,WACE,MAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAoBA,OAlBAC,qBAAU,WACRC,MAAM,yCACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACCR,GAAY,GACZE,EAASM,MAKX,SAACX,GACCG,GAAY,GACZF,EAASD,QAGd,IAECA,EACK,0CAAaA,KACVE,EAIR,qBAAKU,UAAU,MAAf,SACGR,EAAMS,KAAI,SAACC,EAAmBC,GAApB,OACT,gCACE,mBAAGC,KAAMF,EAAKG,IAAd,SACE,+BACGF,EAAQ,EADX,KACgBD,EAAKI,KAAKC,WAAW,OAAK,SAG5C,qBAAKC,wBAAyB,CAAEC,OAAQP,EAAKQ,OAAO,MACpD,uBACA,qBAAKF,wBAAyB,CAAEC,OAAQP,EAAKQ,OAAO,MACpD,yBATQP,QALT,8CCtBIQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.d7bcddac.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nexport interface ItemsObject {\n  name: string;\n  url: string;\n  ques: string;\n  answer: string[];\n}\n\nfunction App() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/AWS-MCQ/exam4trainingListQueAns.json\")\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setItems(result);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      );\n  }, []);\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <div className=\"App\">\n        {items.map((item: ItemsObject, index: number) => (\n          <div key={index}>\n            <a href={item.url}>\n              <h4>\n                {index + 1}. {item.name.replaceAll(\"Ã‚\", \"\")}\n              </h4>\n            </a>\n            <div dangerouslySetInnerHTML={{ __html: item.answer[0] }} />\n            <br />\n            <div dangerouslySetInnerHTML={{ __html: item.answer[2] }} />\n            <hr />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}